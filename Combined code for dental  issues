import os
import cv2
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report

# Paths to datasets
dental_cavities_dir = r"C:\Users\vaish\Downloads\Dental issues Dataset"  # Path to plaque buildup images
discolorated_teeth_dir = r"C:\Users\vaish\Downloads\Dental issues DataSet"  # Path to discolorated teeth images
plaque_buildup_dir = r"C:\Users\vaish\Downloads\Dental issues DataSet"  # Path to dental plaque images
mouth_ulcer_dir = r"C:\Users\vaish\Downloads\Dental issues Dataset"  # Path to mouth ulcer images
gum_disease_dir = r"C:\Users\vaish\Downloads\Dental issues DataSet"  # Path to gum diseases images
healthy_teeth_dir = r"C:\Users\vaish\Downloads\Healthy Teeth and Gums Image.zip"  # Path to healthy teeth and gums images


# Preprocessing function (for both plaque buildup and gum disease)
def preprocess_data(dental_cavities_dir, discolorated_teeth_dir, plaque_buildup_dir, mouth_ulcer_dir, gum_disease_dir, healthy_teeth_dir, img_size=(128, 128)):
    X = []
    y = []

  # Load dental cavities images
    for img_name in os.listdir(dental_cavities_dir):
        img_path = os.path.join(dental_cavities_dir, img_name)
        img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)  # Load as grayscale
        img = cv2.resize(img, img_size)  # Resize to fixed dimensions
        X.append(img.flatten())  # Flatten the image
        y.append(2)  # Label for gum disease

  # Load discolorated teeth images
    for img_name in os.listdir(discolorated_teeth_dir):
        img_path = os.path.join(discolorated_teeth_dir, img_name)
        img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)  # Load as grayscale
        img = cv2.resize(img, img_size)  # Resize to fixed dimensions
        X.append(img.flatten())  # Flatten the image
        y.append(2)  # Label for gum disease

    # Load plaque buildup images
    for img_name in os.listdir(plaque_buildup_dir):
        img_path = os.path.join(plaque_buildup_dir, img_name)
        img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)  # Load as grayscale
        img = cv2.resize(img, img_size)  # Resize to fixed dimensions
        X.append(img.flatten())  # Flatten the image
        y.append(1)  # Label for plaque buildup

    # Load mouth ulcer images
    for img_name in os.listdir(mouth_ulcer_dir):
        img_path = os.path.join(mouth_ulcer_dir, img_name)
        img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)  # Load as grayscale
        img = cv2.resize(img, img_size)  # Resize to fixed dimensions
        X.append(img.flatten())  # Flatten the image
        y.append(2)  # Label for gum disease

   # Load gum disease images
    for img_name in os.listdir(gum_disease_dir):
        img_path = os.path.join(gum_disease_dir, img_name)
        img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)  # Load as grayscale
        img = cv2.resize(img, img_size)  # Resize to fixed dimensions
        X.append(img.flatten())  # Flatten the image
        y.append(2)  # Label for gum disease

    # Load healthy teeth images
    for img_name in os.listdir(healthy_teeth_dir):
        img_path = os.path.join(healthy_teeth_dir, img_name)
        img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)  # Load as grayscale
        img = cv2.resize(img, img_size)  # Resize to fixed dimensions
        X.append(img.flatten())  # Flatten the image
        y.append(0)  # Label for healthy teeth

    return np.array(X), np.array(y)


# Load and preprocess data
X, y = preprocess_data(dental_cavities_dir,discolorated_teeth_dir,plaque_buildup_dir,mouth_ulcer_dir,gum_disease_dir,healthy_teeth_dir)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train SVM classifier
svm_model = SVC(kernel='linear', probability=True)
svm_model.fit(X_train, y_train)

# Evaluate the model
y_pred = svm_model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))


# Function to shuffle and predict test images
def shuffle_and_test(model, img_dir, img_size=(128, 128)):
    # Get all image file names
    img_names = os.listdir(img_dir)
    np.random.shuffle(img_names)  # Shuffle the list of image names

    # Loop through shuffled images and predict
    for img_name in img_names:
        img_path = os.path.join(img_dir, img_name)
        img = cv2.imread(img_path)
        gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        resized_img = cv2.resize(gray_img, img_size)
        flat_img = resized_img.flatten().reshape(1, -1)

        prediction = model.predict(flat_img)
        label = {0: "Healthy teeth", 1: "Dental cavities", 2: "Teeth discoloration", 3: "Dental Plaque", 4:"Mouth ulcer", 5:"Gum disease", 6:"Healthy teeth"}.get(prediction[0], "Unknown")
        color = {0: (0, 255, 0), 1: (0, 0, 255), 2: (255, 0, 0)}.get(prediction[0], (255, 255, 255))  # Colors for each class

        # Draw a bounding box and label
        h, w, _ = img.shape
        start_point = (int(w * 0.25), int(h * 0.25))  # Simulated bounding box position
        end_point = (int(w * 0.75), int(h * 0.75))

        cv2.rectangle(img, start_point, end_point, color, 2)
        cv2.putText(img, label, (start_point[0], start_point[1] - 10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)

        # Display the result
        cv2.imshow('Detection (Shuffled)', img)
        print(f"Processing {img_name}: {label}")
        cv2.waitKey(1000)  # Display each image for 1 second
        cv2.destroyAllWindows()


# Test directory
test_dir = r"C:\Users\vaish\Downloads\Combined_Test_Data"  # Path to your combined test directory

# Example usage: Shuffle and test all images in the test directory
shuffle_and_test(svm_model, test_dir)
